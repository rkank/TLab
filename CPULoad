#!/bin/bash
# ******************************************************************************
# this bash script is written by Jens BÃ¼rger, and modified by Dat Tran.
# ******************************************************************************
#
# in order to run this script nicely you need to set up an ssh key to store your password.
# If not set up correctly, you'll need to enter your password for every single time you ssh to a machine
#
# For seeting up the ssh key look here: http://www.linuxproblem.org/art_9.html
#
# if this script does not execute on your machine run: chmod 755 CPUload
#
# The outut indicates the load over the last 1, 5 and 15 minutes as well as the memory usage
# a value of 1 means that the CPU is completely used
# a value greater than 1 indicates that there are other tasks waiting in line to execute
# a value smaller than 1 indicates free computational resources

# bug report:
# sometimes the uptime command does not return a valid string. In this case an error message is printed

# ******************************************************************************
# functions in this module
# ******************************************************************************
colorLoad()
{
	if (( $(bc <<< "$1 >= 2") == 1 ))
	then
		echo '\e[1;31m'$1'\e[0m'
	elif (( $(bc <<< "$1 >= 1") == 1 ))
	then
		echo '\e[1;33m'$1'\e[0m'
	else
		echo '\e[1;32m'$1'\e[0m'
	fi
}

# ******************************************************************************
GetLoad()
{
	# define user name to use when ssh to remote machine
	user=$USER
    
	# check to see if the machine is up
	ping -c 2 $1 > /dev/null
	if [ $? -ne 0 ]; then
		# display the message
		echo "$1 is dead";

		# skip the rest
		return 1
	fi

	#ssh to remote machine and get uptime and number of cores
	#logout after operations
	#test=$(ssh -4 $1 "uptime && grep -c processor /proc/cpuinfo && free -m && exit")
	#test=$(ssh -4 $1 "uptime && grep -c processor /proc/cpuinfo && free -m && ps haux | awk -v user=$user '\$1 ~ user {sum += \$4} END {print user "," sum}' && exit")
    test=$(ssh -4 $1 "uptime && grep -c processor /proc/cpuinfo && free -m && ps ux | awk -v user=$user '\$1 ~ user {sum += \$4} END {print user ", " sum}' && exit")

    #test=`uptime && grep -c processor /proc/cpuinfo && free -m && ps ux | awk -v user=$user '\$1 ~ user {sum += \$4} END {print user ", " sum}'`

	#echo test = $test
	test=`echo "$test" | sed -e 's#.*average: \(\)#\1#'`
	procs=`echo $test | cut -d' ' -f 4`
	#UserMem=`echo $test | cut -d' ' -f 27`
	UserMem=`echo $test | awk '{print $NF}'`

#	UserMem=(ssh -4 $1 "ps haux | awk -v user=$user '$1 ~ user { sum += $4} END { print user, sum; }' && exit"
#	load=$(ssh -4 $user@$1.ece.pdx.edu "uptime && exit")
#	procs=$(ssh -4 $user@$1.ece.pdx.edu "grep -c processor /proc/cpuinfo && exit")
#	mem=$(ssh -4 $user@$1.ece.pdx.edu "free -m && exit")

	#string manipulation to save the load values
	#values=`echo "$test" | sed -e 's#.*average: \(\)#\1#'`
	#echo test = $test
	values=$test
	first=`echo $values| cut -d' ' -f 1`
	first=`echo $first| cut -d',' -f 1`
	second=`echo $values| cut -d' ' -f 2`
	second=`echo $second| cut -d',' -f 1`
	third=`echo $values| cut -d' ' -f 3`
	TotalMemTemp=`echo $test| cut -d':' -f 2`

    #echo TotalMem = $TotalMemTemp

	TotalMem=`echo $TotalMemTemp| cut -d' ' -f 1`
	UsedMem=`echo $TotalMemTemp| cut -d' ' -f 2`

	#echo UsedMem = $UsedMem
	#UsedMem=`echo $UsedMem| cut -d' ' -f 1`
	#echo UsedMem = $UsedMem

	# check if uptime has returned a string
	char=${#first}
	if (("$char" > 0))
	then
		#do floating point division with load and core numbers
		result1=`echo "scale=2; $first/$procs" | bc -l`
		result1=$(colorLoad $result1)

		result2=`echo "scale=2; $second/$procs" | bc -l`
		result2=$(colorLoad $result2)

		result3=`echo "scale=2; $third/$procs" | bc -l`
		result3=$(colorLoad $result3)

		MemUse=`echo "scale=2; $UsedMem/$TotalMem*100.0" | bc -l`
        #UserMem=`echo "a=$UserMem/$TotalMem * 100.0; scale=2; a/1" | bc -l`

        #echo test = $test
        #echo TotalMem = $TotalMem
        #echo UsedMem = $UsedMem
        #echo MemUse = $MemUse
        #echo UserMem = $UserMem

		if (( $(bc <<< "$MemUse>= 75") == 1 ))
		then
			MemUse='\e[1;31m'$MemUse'\e[0m'
		elif (( $(bc <<< "$MemUse >= 50") == 1 ))
		then
			MemUse='\e[1;33m'$MemUse'\e[0m'
		else
			MemUse='\e[1;32m'$MemUse'\e[0m'
		fi

   		# set the blue color for the machine name
		MachineName='\e[1;34m'$1'\e[0m'

		# check length of machine name to use tab to align list
		char=${#1}
		if (("$char" > 6))
		then
			echo -e $MachineName '\t'$result1'\t'$result2'\t'$result3'\t'$procs'\t'$UsedMem"/"$TotalMem'\t   '"("$MemUse"%)"'\t'"("$UserMem"%)"
		else
			echo -e $MachineName '\t\t'$result1'\t'$result2'\t'$result3'\t'$procs'\t'$UsedMem"/"$TotalMem'\t   '"("$MemUse"%)"'\t'"("$UserMem"%)"
		fi

		#sum up values for average calculation
		OneMinSum=`echo "scale=2; $OneMinSum + $first" | bc -l`
		FiveMinSum=`echo "scale=2; $FiveMinSum + $second" | bc -l`
		FifteenMinSum=`echo "scale=2; $FifteenMinSum + $third" | bc -l`
		coreSum=`expr $coreSum + $procs`
		memSum=`expr $memSum + $UsedMem`
		MemTotal=`expr $MemTotal + $TotalMem`
		temp=`echo "$UserMem * $TotalMem / 100.0" | bc`
        #MemOwnTotal=`expr $MemOwnTotal + $temp`
        #MemOwnTotal=`expr $MemOwnTotal + $UserMem`
        MemOwnTotal=`echo "$MemOwnTotal + $temp" | bc`

	else
		char=${#1}
		if (("$char" > 6))
		then
			echo -e $1 '\t' "Data was not properly send. Try again later"
		else
			echo -e $1 '\t\t' "Data was not properly send. Try again later"
		fi
	fi
}

# ******************************************************************************
ReadHostFile()
{
  # reset the index
  i=0

  # read the host file and save the machine names in an array
  HostFile="$1"
  while read -r line
  do
    # read the machine name and remove the part: ece.pdx.edu
    if [[ "$line" != *['!'@#\$%^\&*()_+]* ]]
    then
        # get the machine name
        MyArray[$i]=`echo "$line" | sed -e "s/\..*$//g"`
        i=$((i+1))
    fi
  done < "$HostFile"

  # kill all the processes and cleanup
  for MachineName in ${MyArray[*]}
  do
		if [ "$MachineName" = "tor" ]
		then
				echo -e '\e[1;36m'"Lab machines"'\e[0m'
		fi

    # echo -e "--> \e[1;31mCopyFile $MachineName\e[0m"
    GetLoad $MachineName

  done
	# set the current machine name
    line=$(/bin/hostname)  
    CurrHost=`echo "$line" | sed -e "s/\..*$//g"`
	GetLoad $CurrHost
}

# ******************************************************************************
# the main code
# ******************************************************************************
clear

OneMinSum=0
FiveMinSum=0
FifteenMinSum=0
coreSum=0
memSum=0
MemTotal=0
MemOwnTotal=0.0

echo -e '\e[1m'"Server load"'\t'"1min"'\t'"5min"'\t'"15min"'\t'"cores"'\t'"memory usage (MB)  Percent"'\t'"own usage"'\e[0m'

if [ $# -eq 0 ]
then
    ReadHostFile /u/datran/bin/Hostfile
else
    for Host in "$@"
    do
        GetLoad $Host
    done
fi

# ******************************************************************************
# #list of machines to look for
# #echo -e '\e[1;31m'"Servers"'\e[0m'
# if [ "$#" -ne 1 ]; then
# GetLoad inn
# GetLoad reuss
# GetLoad orbe
# GetLoad maggia
# GetLoad lonza
# GetLoad doubs
# GetLoad kander
# GetLoad birs
# GetLoad ticino
# GetLoad linth
# GetLoad saane
# GetLoad rhine
# GetLoad rhone
# GetLoad thur
# GetLoad aar
# GetLoad zhora
# GetLoad taffey
# GetLoad eldon
# GetLoad gaff
# GetLoad harry
# GetLoad holden
# GetLoad rachael
# GetLoad hannibal
# GetLoad pris
# GetLoad leon
# GetLoad roy
#
# echo -e '\e[1;36m'"Lab machines"'\e[0m'
# #echo "Lab machines"
# GetLoad tor
# GetLoad moench
# GetLoad matterhorn
# GetLoad rothorn
# GetLoad niederhorn
# GetLoad titlis
# GetLoad pilatus
# GetLoad bietschhorn
# GetLoad balmhorn
# GetLoad jungfrau
# GetLoad breithorn
# GetLoad altels
# GetLoad eiger
# else
# GetLoad $1
# fi

if (($coreSum > 0))
then
  #print sum
  OneMinSum=`echo "scale=2; $OneMinSum/$coreSum" | bc -l`
  FiveMinSum=`echo "scale=2; $FiveMinSum/$coreSum" | bc -l`
  FifteenMinSum=`echo "scale=2; $FifteenMinSum/$coreSum" | bc -l`
  reluse=`echo "scale=2; $memSum/$MemTotal*100" | bc -l`
  #relOwnuse=`echo "scale=2; $MemOwnTotal/$MemTotal*100" | bc -l`
  relOwnuse=`echo "a=$MemOwnTotal/$MemTotal*100;scale=2; a/1" | bc -l`
  #relOwnuse=`echo $MemOwnTotal`

  echo -e "----------------------------------------------------------------------------------------"
  echo -e '\e[1m'"Total"'\t\t'$OneMinSum'\t'$FiveMinSum'\t'$FifteenMinSum'\t'$coreSum'\t'$memSum"/"$MemTotal'\t   '"("$reluse"%)"'\t'"("$relOwnuse"%)"'\e[0m'
fi
